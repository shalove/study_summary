<?php 

1、文件系统目录
/  				表示根目录
/bin 			普通二进制目录，里面就是指令，所有人员都可以执行
/sbin 			超级管理员使用的命令	（superbin）
/home 			普通用户的家目录
/root 			超级管理员的家目录
/boot 			内核目录
/media 			挂载光盘的目录
/mnt 			挂载目录：U盘
/dev 			设备目录：cpu、硬盘   (device)
/proc 			系统运行时，内核映射目录，系统内核目录 /boot
/tmp 			临时目录，在里面的数据，会被系统不定时的清空
/var 			动态变化的文件的存储目录，记录型的文件都放这里
/etc 			配置目录
/lost+found     失物招领处。这个目录不要有希望，要习惯CTRL + S 保存
/opt 			第三方程序安装目录
/usr 			是程序默认安装目录
/lib 			动态连接库目录（相当于windows里面的.dll文件，linux里面的.so文件）


这些目录只是默认的规范，并不一定要这么操作，但是工作中可能一些不重要的软件就会采取默认安装
这时候就需要知道对应目录的存储，才知道去哪找文件；实际工作中公司可能都有自己的规范安装目录




2、常用shell指令

ls [目录名]   			查看当前目录内容，如果给目录名就会查看对应目录的内容，注意ls	与目录名之间有空格

ls –a [目录名]     		显示当前（可以选目录）所有文件目录（包含隐藏文件）

ls -l [目录名]     		显示当前目录（可以选目录）下面的文件的属性

ls –a –l [目录名]     	显示当前目录（可以选目录）下面所有文件的属性
ls –al [目录名]       	上面相同的效果

ll [目录名]             查看文件（可以选目录）的属性,它是ls –l的缩写

pwd 					查看当前所在目录层级


cd用于切换目录
cd 						家目录
cd ~					家目录 
cd /					根目录 
cd ./ 					当前目录
cd ../ 					上级目录



cd 直接回到家目录，但是只是直接回到家目录下，不会再往下
cd~ 也是回到家目录，但是后面还可以跟参数，也就是还能访问到家目录下的文件目录
eg：    cd ~/测试目录    这样就进到了家目录下的测试目录中


clear 	清除,实际只是将屏幕向下翻页而已

su  		切换到超级管理员（需要输入密码）
su 用户名	切换到普通用户      eg：  su sha   切换到用户sha

su指令切换到的用户使用exit退出

说明：su指令是在执行程序的时候，权限不够的时候，临时使用一下，不要一直用切换的用户操作



shutdown  -h  -r  -k  -c  			注意shutdown 指令只能在超管权限下执行，普通用户无权限

-h  	关机
-r  	重启
-k 		提示
-c 		结束关机与重启的任务

时间参数：
now  	立即关机
0		立即关机
3		代表3分钟之后关机

CTRL + C ：结束进程


halt 		：立即关机（具体参数看手册）
reboot 		：立即重启（具体参数看手册）


whereis 指令 	：查看指令的所在绝对路径



2、   VIM 编辑器

vim编辑器有三种模式：

	普通模式：实现基本操作功能，删除（dd），复制（yy），粘贴（p），还原（u）
	命令模式：能实现普通模式的所有功能，并且还能实现更复杂的操作
	插入模式：能实现文件内容的添加

命令模式和插入模式之间不能互相切换，必须通过普通模式来切换

普通模式进入命令模式只要输入冒号 ： 就可以了	
普通模式进入插入模式输入 i 或 a 或 o 	（其实插入也就是修改，esc键退出插入模式）
i（在选中位置之前插入）
a（在选中位置之后插入）
o（在下一行插入）


（1）普通模式
普通模式下大移动：   gg  移到首行     G  移到末尾

复制
yy  	复制当前行
2yy  	复制当前行和下一行

粘贴
p 		将复制的内容（可能复制不止一行）在光标选中行的下一行粘贴

删除
dd 		删除当前行
3dd 	删除往下包含当前行的三行

还原
u 		撤销上次操作（相当于window里的ctrl+z）

普通模式的复制、粘贴、删除都是要将光标选中要操作的行进行操作，所以他没有操作行的参数


普通模式下面按（/），进入搜索模式

/要搜索的内容

搜索到内容之后：
内容之间移动:
n:正向移动
N:反向移动






（2）命令模式
显示行号：
	set nu 				其实是 set number的简写

取消行号
	set nonu 	其实是 set nonumber的简写

复制
1 copy 5 	把1行内容复制到第5行的下面一行			（这几个操作数之间加不加空格都可以）
1,4 co 6 	把第1行到第4行的内容复制到第6行的下面一行

删除
1 d 			把1行的内容删除			（这几个操作数之间加不加空格都可以）
5,9 d 		把第5行到第9行的内容进行删除

移动	
1 move 5 	把第1行的内容移动到第5行的下面一行 	（这几个操作数之间加不加空格都可以）
17,18 m 5 	把第17行到第18行的内容移动到第5行的下面一行

%		：到尾行
num 	:代表定位到多少行


替换：
10,14s/要替换的内容/替换成的内容/gi  			表示要将10到14行的内容进行替换，注意s是固定写法
g：全局匹配
i:不区分大小写



vim常用命令
打开文件
vim 文件名 					打开当前目录下文件
vim + /root/install.log 	打开install.log 文件并光标定位到文件最后一行
vim +10  /root/install.log 	打开install.log 文件并光标定位到文件第10行，注意+与10之间不能有空格
vim +/iso /root/install.log 打开install.log 文件并搜索iso 

打开多个文件
vim  文件1 文件2 文件3..

多个文件切换（在命令模式下输入下面指令）
next 	:下一个文件
prev 	：上一个文件
last 	:最后一个文件
first 	：第一个文件


保存文件（在命令模式）
w 		：保存
q 		：退出
q! 		：强制退出
w! 		：强制保存

wq！	：强制保存退出 		（注意顺序，必须是wq不能是qw，先保存在退出）


3、shell命令补全 
按TAB键：
如果补全的值是唯一的，按一次tab就能补全。
如果补全的值不是唯一的，按二次tab显示补全列表。

按[esc]键 + [.]键，就是把上一次命令的最后一个参数，拿到当前来使用
! + [字母] 就可以执行以字母开头，最近执行的命令。



4、linux中软件的安装和卸载

linux中 *.rpm结尾的文件，类似于windows的.exe文件。是可二进制的执行包文件。

4.1 rpm安装软件查询
rpm -q  查询
rpm -a  所有
rpm -qa 查询系统上所有安装的软件


grep 	 	：文本搜索工具
grep vim 	：搜索文本里有vim的行。


[|] 	:管道，用于将左侧数据传给右侧

rpm –qa | grep vim 	查询安装的软件中带有vim字样的软件



4.2 rpm软件的卸载 

rpm –e 软件名 	 	e（erase删除）
卸载软件时，有时不同的软件之间有依赖关系
依赖关系说明：安装软件的时候：A > B > C
卸载软件的时候：C > B > A


4.3 软件安装
rpm –ivh 安装包       i（install安装）  v（显示指令执行过程） h（安装时列出标记）



logout用在什么时候和 exit 有什么区别？
logout是在命令行终端里的退出方式


命令行终端是类似于widow的黑窗口，那他和用应用程序里系统工具打开的 终端有什么区别，分别用于什么时候
命令行终端实际就是图形界面的 命令行终端

使用shutdown命令后，会进入状态，使用ctrl+C 退出后直接就关闭了 设置的延时关机，这样 shutdown -c 不是没作用了
使用shutdown命令后就不能再进行其他操作了，只有其他用户可以使用 shutdown -c 来结束或自己使用ctrl+c取消关机、或重启


vim的三种模式切换问题
其他两种模式退到普通模式直接 esc就可以

linux是多用户的，其他那A用户能不能操作B用户的家目录下的文件呢
看权限，有权限就可以


注意vim中的dd、yy等命令都不是linux命令（他是vim编辑器中的命令），在写常用的linux命令的时候不要写
vim中的命令，vim命令是linux命令






2、   虚拟机启动时的一些配置    vim /etc/grub.conf
	  登陆界面的设置（比如设置登陆默认图形界面还是命令界面）  vim /etc/inittab

	  挂载文件系统		/etc/fstab



3、用户和组

	3.1
	组文件： 		/etc/group
	组密码文件：	/etc/gshadow

	用户文件:		/etc/passwd 
	用户密码文件: 	/etc/shadow

	3、2
	组相关指令：

		添加组  groupadd 组名					
				groupadd hemai4  创建黑马4组

		参数	-g（组编号） 	groupadd -g  组编号  组名 		
								groupadd -g 250 hemai4  	创建黑马4组编号250	


		修改组  	groupmod 
			参数 	-n （修改组名）			groupmod –n 新名称  旧名称
					-g（修改组编号） 		groupmod –g 新编号 组名称

		删除组 		groupdel			groupdel 组名

	3.3
	用户相关指令
		添加用户  useradd 用户名	
			参数   -g ：指定组编号		useradd  -g 250 用户名

		修改用户  usermod 
			参数  -u 修改用户编号		usermod -u 222 用户名
				  -l 修改用户名称 		usermod -i 新用户名 旧用户名
				  -c 修改用户注释 		usermod -c 注释内容  名称

		删除用户  userdel 用户名
			参数	-r 连带删除用户生成时产生的相关文件


	3。4
	添加附属组	gpasswd -a 用户名 组名称     表示将用户加入到某个组中（加入的组就是用户的附属组）
	删除附属组  gpasswd -d 用户名 组名称



	3.5  tail 命令
		用于打开文件尾部（默认10行）显示到界面

		参数：  -n    显示末尾多少行

		tail  -n 10 ceshi.txt  显示ceshi.txt的末尾10行内容


	3.6 man指令
		man 要查询的命令		（显示命令的帮助，按q退出帮助）

		还有：

		指令 -h 		（有的命令不支持）
		指令 --help    （有的命令不支持）



4、用户设置

	4.1 修改密码
		passwd  			不加参数修改的是当前用户的密码
		passwd 用户名		加用户名修改对应用户的密码

		passwd -S（大写S）  用户名       	查看用户密码状态
		passwd -l 用户名    锁定用户		锁定的用户不能登录
		passwd -u 用户名    解锁用户		解除锁定的用户
		passwd -d 用户名    删除用户密码	删除密码的用户不需要密码就能登录

		这里的锁定和解锁实际上就是修改了用户密码文件，在用户密码前加 !! 就能锁定用户，解锁就是将两个感叹号去掉

	4.2禁止普通用户登陆
		vim /etc/nologin
		在etc下创建一个 nologin文件就可以阻止所有普通用户登录，想解除就删掉该文件 


	4.3 显示用户信息
		id   用户名		显示用户的ID名字，组名，组ID

		groups 用户名 		显示用户组的信息

		这两个都是不加参数显示当前的，加参数显示参数的信息


	4.4 查看用户资料
		chfn ：设置用户信息
		finger ：查看用户信息 （需要安装指令的相关安装包）



	4.5 切换用户

		su    				切换到管理员
		su 用户名 			切换到指定用户
		su - [用户名]		
		切换到用户的时候使用用户的环境变量（默认进入切换到的用户的家目录，而不是原来的），不加用户名，切换到的就是超级管理员的家目录



	4.6 
		newgrp ：切换主组与附属组
		newgrp 组名 用户名     
			将用户的参数组名切换为主组（注意newgrp使用是用谁登陆才能切换对应用户的主附组，而且切换的用户必须拥有附属组）


	4.7 批量添加用户

		建立两个文件    （1）用户文件 	 vim /root/user.txt
						（2）密码文件	 vim  /root/pass.txt

		将生成好的用户文件导入/etc/passwd里面去				
		newusers < /root/user.txt 

		把/etc/shadow的密码移动到/etc/passwd里面去
		pwunconv 

		把pass.txt的内容移动到/etc/passwd里面去
		chpasswd  < /root/pass.txt 

		把/etc/passwd里面的密码移动到/etc/shadow里面



	4.8 赋予某些普通用户特殊功能
		需要先将要授予的特权指令写入/etc/sudoers文件中

		格式： bigc  ALL(主机地址)=[(用户名)](命令的绝对路径)

		bigc  ALL=(root)/sbin/shutdown   给bigc赋予了关机权限（执行命令临时使用root的权限）

		设置好之后就可以使用了
		sudo shutdown –h 10 


		sudo
			-l ：查看自己有哪些特权！！


	4.9 whereis 命令   查看命令的绝对路径



5 、 文件操作
	文件权限的说明：
		权限分为：
					r 读
					w 写
					x 可执行
					- 没有权限	

	权限可以使用数字来表示：
	r = 4 ; w = 2 ; x = 1; - = 0

	数字在一组里面的和，就是这组代表的所有权限！
	rwx = 7

	文件权限是三位一组
		前面三个：属主权限
		中间三个：属组权限
		后面三个：其它权限

		rwx rwx rwx = 777  属主权限rwx   数组权限rwx 其他权限rwx
		r-xr-x--x = 551	   属主权限r-x   数组权限rw-x 其他权限--x

		权限设置的时候，属主 》 属组 》 其它
		设置写权限的时候，一般都要给读权限。


5.2 更改文件权限
	chmod：更改文件权限

	（1）数字形式修改--比较常用
		chmod  777 /root/index.php    将/root/index.php文件权限修改为777 （rwxrwxrwx）

	（2）字符形式修改
		字符修改：
			u ：属主			（user属主）
			g ：属组 			（group属组）
			o ：其它			 (other其他)
			a ：全部			（all全部）
			增加使用【+】，减少使用【-】

		示例  chmod  u-rwx /root/index.php    将/root/index.php的属主权限减去rwx
		示例  chmod  g+wx /root/index.php     将/root/index.php的属组权限加上wx

	数字和字符修改 还可以加参数 -R 表示递归修改
	示例  chmod -R u-rwx /root/index.php
		  chmod -R  777 /root/index.php 

	(3)  chown ：修改属主   
		 chgrp ：修改属组(基本不用，chown也能修改属组)

		 参数 -R   递归修改

		 示例 chown bigc:root /root/index.php  将index.php的属主改为bigc，属组改为root

		 单独修改属组：
			示例 chown  :bigc /root/index.php  将index.php的属组改为bigc



6、 目录操作
	mkdir :创建目录
		-p ：多级目录修改（递归）
		-m ：指定创建目录时的权限 


	（不常用）rmdir  删除目录
		-p ：多级目录修改（递归）
	重点说明：使用rmdir 删除目录的时候，目录里面内容必需为空。并且目录参数必需是最内层的
	但是这个命令也基本不用，可用删除文件的命令删除目录，参数还简便


7、文件操作
	touch ：创建文件

	rm ：删除文件
		-f ：强制删除
		-r ：用于删除目录   （这个参数的目录参数，就是第一层就可以了）

		rm –rf 目录     删除指定目录
		rm –rf / 		:这个是直接删除掉系统！！！！！慎用！！！！


	特别是加了f之后，特别要注意，自己在删除什么。一定是自己非常清楚的文件，才可以使用f参数。
在这里没有回收站，找不回来的。

说明：工作中删除文件，不要真的删除。请备份。或者重命名。一般在服务器上的文件都要到达一段的时间段之后才能删除。尽量保留半年以上。



8、复制与剪切（重命名）操作
	
	8.1 
		cp  ：复制
		示例  cp  源目录   复制到的路径
		-R ：多级目录操作（递归）     使用这种方式才能复制目录

		复制的时候，谁复制，属性就会修改是谁的
        -p ：备份的时候使用的选项参数。这个参数可以保持被复制的文件的属性。
        	在工作中备份的时候，一定使用这个参数。保持属性的唯一不变	


    8.2
        mv ：移动
        移动就是移动的时候，移动到某个目录里面。目标是目录

        mv ：重命名
        重命名，就是移动的时候，目录是一个新的文件名

    8.3 
    	wc ：统计
    		-l ： 统计行
    		-c ： 统计字符
    		-w ：统计单词

    8.4
       grep搜索匹配行
       示例： grep ：搜索文本内容

       	-n ： 显示行号
       	-c ：统计次数
       	-i 不分区大小写


    8.5 显示文件内容
		cat ：把文本内容打印至屏幕
		tac ：把文本内容倒着打印至屏幕


9 创建链接
	  硬链接：可以在任意删除文件时候，都可以通过其它文件找到数据块。
	  示例  ln  源路径文件   目标路径文件

	  软链接在删除了指向的文件，软链接的文件将失效。
	  示例  ln –s  源目录文件  目标目录文件


	  但是在工作中很多时候，都使用的是软链接的。
		创建软链接的时候，一定使用绝对路径！！
	